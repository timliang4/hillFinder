import { ActivityType } from '../enums';
import { ActivityZone, Comment, DetailedActivity, Lap, SummaryActivity, SummaryAthlete } from '../models';
import { Request } from '../request';
export declare type CreateActivityRequest = {
    name: string;
    type: ActivityType;
    start_date_local: string;
    elapsed_time: number;
    description?: string;
    distance?: number;
    trainer?: number;
    commute?: number;
};
export declare type GetActivityByIdRequest = {
    id: number;
    include_all_efforts?: boolean;
};
export declare type GetCommentsByActivityIdRequest = {
    id: number;
    page?: number;
    per_page?: number;
};
export declare type GetKudoersByActivityIdRequest = {
    id: number;
    page?: number;
    per_page?: number;
};
export declare type GetLapsByActivityIdRequest = {
    id: number;
};
export declare type GetPhotosByActivityIdRequest = {
    id: number;
    photo_sources?: boolean;
    size?: number;
};
export declare type GetZonesByActivityIdRequest = {
    id: number;
};
export declare type GetLoggedInAthleteActivitiesRequest = {
    before?: number;
    after?: number;
    page?: number;
    per_page?: number;
};
export declare type UpdateActivityByIdRequest = {
    id: number;
    name?: string;
    type?: ActivityType;
    start_date_local?: string;
    elapsed_time?: number;
    description?: string;
    distance?: number;
    trainer?: number;
    commute?: number;
};
export declare class Activities {
    private readonly request;
    constructor(request: Request);
    createActivity(params: CreateActivityRequest, access_token?: string): Promise<DetailedActivity>;
    getActivityById(params: GetActivityByIdRequest, access_token?: string): Promise<DetailedActivity>;
    getCommentsByActivityId(params: GetCommentsByActivityIdRequest, access_token?: string): Promise<Comment[]>;
    getKudoersByActivityId(params: GetKudoersByActivityIdRequest, access_token?: string): Promise<SummaryAthlete[]>;
    getLapsByActivityId(params: GetLapsByActivityIdRequest): Promise<Lap[]>;
    getPhotosByActivityId(params: GetPhotosByActivityIdRequest, access_token?: string): Promise<Lap[]>;
    getLoggedInAthleteActivities(params?: GetLoggedInAthleteActivitiesRequest): Promise<SummaryActivity[]>;
    getZonesByActivityId(params: GetZonesByActivityIdRequest, access_token?: string): Promise<ActivityZone[]>;
    updateActivityById(params: UpdateActivityByIdRequest, access_token?: string): Promise<DetailedActivity>;
}
